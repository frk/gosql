// DO NOT EDIT. This file was generated by "github.com/frk/gosql".

package testdata

import (
	"time"

	"github.com/frk/gosql"
)

var _FilterTextSearchRecords_colmap = map[string]string{
	"Id":        `u."id"`,
	"Email":     `u."email"`,
	"FullName":  `u."full_name"`,
	"CreatedAt": `u."created_at"`,
}

func (f *FilterTextSearchRecords) UnmarshalFQL(fqlString string) error {
	return f.Filter.UnmarshalFQL(fqlString, _FilterTextSearchRecords_colmap, false)
}

func (f *FilterTextSearchRecords) UnmarshalSort(sortString string) error {
	return f.Filter.UnmarshalSort(sortString, _FilterTextSearchRecords_colmap, false)
}

func (f *FilterTextSearchRecords) TextSearch(v string) {
	f.Filter.TextSearch(`u."_search_document"`, v)
}

func (f *FilterTextSearchRecords) Id(op string, val int) *FilterTextSearchRecords {
	f.Filter.Col(`u."id"`, op, val)
	return f
}

func (f *FilterTextSearchRecords) Email(op string, val string) *FilterTextSearchRecords {
	f.Filter.Col(`u."email"`, op, val)
	return f
}

func (f *FilterTextSearchRecords) FullName(op string, val string) *FilterTextSearchRecords {
	f.Filter.Col(`u."full_name"`, op, val)
	return f
}

func (f *FilterTextSearchRecords) CreatedAt(op string, val time.Time) *FilterTextSearchRecords {
	f.Filter.Col(`u."created_at"`, op, val)
	return f
}

func (f *FilterTextSearchRecords) AND(nest ...func(*FilterTextSearchRecords)) *FilterTextSearchRecords {
	if len(nest) == 0 {
		f.Filter.AND()
		return f
	}
	f.Filter.AND(func(_ *gosql.Filter) {
		nest[0](f)
	})
	return f
}

func (f *FilterTextSearchRecords) OR(nest ...func(*FilterTextSearchRecords)) *FilterTextSearchRecords {
	if len(nest) == 0 {
		f.Filter.OR()
		return f
	}
	f.Filter.OR(func(_ *gosql.Filter) {
		nest[0](f)
	})
	return f
}
