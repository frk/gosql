// DO NOT EDIT. This file was generated by "github.com/frk/gosql".

package testdata

import (
	"github.com/frk/gosql"
	"github.com/frk/gosql/testdata/common"
)

func (q *SelectWithWhereBlockInPredicate3Query) Exec(c gosql.Conn) error {
	var (
		nstatic = 4                      // number of static parameters
		len1    = len(q.Where.IDs)       // length of slice #1 to be unnested
		pos1    = nstatic                // starting position of slice #1 parameters
		len2    = len(q.Where.Or.IDs)    // length of slice #2 to be unnested
		pos2    = pos1 + len1            // starting position of slice #2 parameters
		len3    = len(q.Where.Emails)    // length of slice #3 to be unnested
		pos3    = pos2 + len2            // starting position of slice #3 parameters
		len4    = len(q.Where.FullNames) // length of slice #4 to be unnested
		pos4    = pos3 + len3            // starting position of slice #4 parameters
	)

	var queryString = `SELECT
	u."id"
	, u."email"
	, u."full_name"
	, u."created_at"
	FROM "test_user" AS u
	WHERE u."id" IN (` + gosql.InValueList(len1, pos1+1) + `)
	AND u."created_at" BETWEEN $1 AND $2
	OR (u."id" IN (` + gosql.InValueList(len2, pos2+1) + `) AND u."created_at" < $3)
	OR u."email" IN (` + gosql.InValueList(len3, pos3+1) + `)
	AND u."full_name" IN (` + gosql.InValueList(len4, pos4+1) + `)
	AND u."is_active" = $4` // `

	params := make([]interface{}, nstatic+len1+len2+len3+len4)
	params[0] = q.Where.CreatedAt.After
	params[1] = q.Where.CreatedAt.Before
	params[2] = q.Where.Or.CreatedBefore
	params[3] = q.Where.IsActive
	for i := 0; i < len1; i++ {
		params[pos1+i] = q.Where.IDs[i]
	}
	for i := 0; i < len2; i++ {
		params[pos2+i] = q.Where.Or.IDs[i]
	}
	for i := 0; i < len3; i++ {
		params[pos3+i] = q.Where.Emails[i]
	}
	for i := 0; i < len4; i++ {
		params[pos4+i] = q.Where.FullNames[i]
	}

	rows, err := c.Query(queryString, params...)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		v := new(common.User)
		err := rows.Scan(
			&v.Id,
			&v.Email,
			&v.FullName,
			&v.CreatedAt,
		)
		if err != nil {
			return err
		}

		q.Users = append(q.Users, v)
	}
	return rows.Err()
}
