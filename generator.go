package gosql

import (
	"bytes"

	gol "github.com/frk/gosql/internal/golang"
	sql "github.com/frk/gosql/internal/sqlang"
)

const (
	filepreamble = ` DO NOT EDIT. This file was generated by "github.com/frk/gosql".`
	gosqlimport  = `github.com/frk/gosql`

	blankid  gol.IdentString = "_"
	recvid   gol.IdentString = "q"
	idxid    gol.IdentString = "i"
	errid    gol.IdentString = "err"
	nilid    gol.IdentString = "nil"
	queryid  gol.IdentString = "queryString"
	paramsid gol.IdentString = "params"
	rowid    gol.IdentString = "row"
	rowsid   gol.IdentString = "rows"
	ifacetyp gol.IdentString = "interface{}"
	errortyp gol.IdentString = "error"
	connid   gol.IdentString = "c"

	//_conn_typ_  = SelectorExpr{X: Ident{"gosql"}, Sel: Ident{"Conn"}}
)

func generate(pkgname string, specs []*typespec) (*bytes.Buffer, error) {
	g := &generator{specs: specs}
	if err := g.run(pkgname); err != nil {
		return nil, err
	}
	return &g.buf, nil
}

type generator struct {
	specs   []*typespec
	pkgname string
	buf     bytes.Buffer

	file gol.File
}

func (g *generator) run(pkgname string) error {
	for _, spec := range g.specs {

		execdecl := g.execdecl(spec)
		querydecl := g.querydecl(spec)
		callexpr := g.callexpr(spec)
		returnstmt := g.returnstmt(spec)
		execdecl.Body.Add(gol.DeclStmt{querydecl}, gol.NL{}, callexpr, returnstmt)

		g.file.Decls = append(g.file.Decls, execdecl)
	}

	g.file.PkgName = pkgname
	g.file.Preamble = gol.CommentList{{filepreamble}}
	g.file.Imports = gol.ImportDecl{{Path: gosqlimport}}
	return gol.Write(g.file, &g.buf)
}

func (g *generator) execdecl(s *typespec) *gol.FuncDecl {
	return &gol.FuncDecl{
		Recv: gol.ParamList{{
			Names: []gol.Ident{{"q"}},
			Type:  gol.StarExpr{X: gol.Ident{s.name}},
		}},
		Name: gol.Ident{"Exec"},
		Type: gol.FuncType{
			Params: gol.ParamList{{
				Names: []gol.Ident{{"c"}},
				Type:  gol.SelectorExpr{X: gol.Ident{"gosql"}, Sel: gol.Ident{"Conn"}},
			}},
			Results: gol.ParamList{{Type: gol.Ident{"error"}}},
		},
	}
}

func (g *generator) querydecl(s *typespec) *gol.GenDecl {
	return &gol.GenDecl{
		Token: gol.GENDECL_CONST,
		Specs: []gol.Spec{gol.ValueSpec{
			Names:   []gol.Ident{{"queryString"}},
			Values:  []gol.Expr{gol.RawStringNode{g.sqldelete(s)}},
			Comment: gol.CommentList{{Text: " `"}},
		}},
	}
}

func (g *generator) callexpr(s *typespec) *gol.AssignStmt {
	return &gol.AssignStmt{
		Token: gol.ASSIGN_DEFINE,
		Lhs:   []gol.Expr{blankid, errid},
		Rhs: []gol.Expr{gol.CallExpr{
			Fun:  gol.SelectorExpr{Sel: gol.Ident{"Exec"}, X: gol.Ident{"c"}},
			Args: gol.ArgsList{List: []gol.Expr{gol.Ident{"queryString"}}},
		}},
	}
}

func (g *generator) returnstmt(s *typespec) *gol.ReturnStmt {
	return &gol.ReturnStmt{[]gol.Expr{errid}}
}

func (g *generator) sqldelete(s *typespec) sql.DeleteStatement {
	return sql.DeleteStatement{
		Table: g.sqlrelid(s.rel.relid),
	}
}

func (g *generator) sqlrelid(id relid) sql.Ident {
	return sql.Ident{
		Name:  sql.Name(id.name),
		Qual:  id.qual,
		Alias: id.alias,
	}
}
