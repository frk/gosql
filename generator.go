package gosql

import (
	"bytes"
	"log"
	"strconv"

	GO "github.com/frk/gosql/internal/golang"
	SQL "github.com/frk/gosql/internal/sqlang"
)

const (
	filepreamble = ` DO NOT EDIT. This file was generated by "github.com/frk/gosql".`
	gosqlimport  = `github.com/frk/gosql`
)

var (
	idblank             = GO.Ident{"_"}
	idrecv              = GO.Ident{"q"}
	idconn              = GO.Ident{"c"}
	ididx               = GO.Ident{"i"}
	iderr               = GO.Ident{"err"}
	idnew               = GO.Ident{"new"}
	idnil               = GO.Ident{"nil"}
	idlen               = GO.Ident{"len"}
	idi64               = GO.Ident{"i64"}
	idres               = GO.Ident{"res"}
	idrow               = GO.Ident{"row"}
	idmake              = GO.Ident{"make"}
	idrows              = GO.Ident{"rows"}
	idexec              = GO.Ident{"Exec"}
	iderror             = GO.Ident{"error"}
	idparams            = GO.Ident{"params"}
	idafterscan         = GO.Ident{"AfterScan"}
	idquery             = GO.Ident{"queryString"}
	idiface             = GO.Ident{"interface{}"}
	idifaces            = GO.Ident{"[]interface{}"}
	idordinals          = GO.QualifiedIdent{"gosql", "OrdinalParameters"}
	sxconn              = GO.QualifiedIdent{"gosql", "Conn"}
	sxerrorinfo         = GO.QualifiedIdent{"gosql", "ErrorInfo"}
	sxexec              = GO.QualifiedIdent{"c", "Exec"}
	sxquery             = GO.QualifiedIdent{"c", "Query"}
	sxqueryrow          = GO.QualifiedIdent{"c", "QueryRow"}
	sxrowscan           = GO.QualifiedIdent{"row", "Scan"}
	sxrowsscan          = GO.QualifiedIdent{"rows", "Scan"}
	sxrowsclose         = GO.QualifiedIdent{"rows", "Close"}
	callrowserr         = GO.CallExpr{Fun: GO.QualifiedIdent{"rows", "Err"}}
	callrowsnext        = GO.CallExpr{Fun: GO.QualifiedIdent{"rows", "Next"}}
	callresrowsaffected = GO.CallExpr{Fun: GO.QualifiedIdent{"res", "RowsAffected"}}
	callinvaluelist     = GO.CallExpr{Fun: GO.QualifiedIdent{"gosql", "InValueList"}}
	calljson            = GO.CallExpr{Fun: GO.QualifiedIdent{"gosql", "JSON"}}
	callmakeparams      = GO.CallExpr{Fun: GO.Ident{"make"}, Args: GO.ArgsList{List: idifaces}}
)

type specinfo struct {
	spec *typespec
	info *pginfo
}

// skipwrite is a helper method that reports whether or not the field's column should be written to.
func (si *specinfo) skipwrite(fc *fieldcolumn) bool {
	return fc.field.readonly && (si.spec.force == nil ||
		(si.spec.force.all == false && !si.spec.force.contains(fc.colid)))
}

// skipread is a helper method that reports whether or not the field's column should be read from.
func (si *specinfo) skipread(fc *fieldcolumn) bool {
	return fc.field.writeonly && (si.spec.force == nil ||
		(si.spec.force.all == false && !si.spec.force.contains(fc.colid)))
}

// usedefault is a helper method that reports whether or not the SQL's DEFAULT
// marker should be used to write a column.
func (si *specinfo) usedefault(fc *fieldcolumn) bool {
	return fc.field.usedefault || (si.spec.defaults != nil &&
		(si.spec.defaults.all || si.spec.defaults.contains(fc.colid)))
}

// skipinit is a helper method that reports whether or not the GO output
// fields should be, if they are pointers, initialized.
func (si *specinfo) skipinit() bool {
	return (si.spec.kind == speckindInsert || si.spec.kind == speckindUpdate) && // has input fields?
		(si.spec.result == nil) // scan output into input fields?
}

func generate(pkgname string, infos []*specinfo) (*bytes.Buffer, error) {
	g := &generator{infos: infos}
	if err := g.run(pkgname); err != nil {
		return nil, err
	}
	return &g.buf, nil
}

type generator struct {
	infos   []*specinfo
	pkgname string
	buf     bytes.Buffer

	file GO.File

	// file specific state
	imports GO.ImportDecl

	// spec specific state, needs to be reset on each iteration
	nparam        int               // number of parameters
	asvar         bool              // if true, the query string should be declared as a var, not const.
	fclose        bool              // if true, the SQL query needs to be closed (with right parentheses) after the filter's been added.
	insx          []GO.SelectorExpr // slice fields for IN clauses
	queryargs     []GO.ExprNode     // list of arguments to be passed to the query (Exec|Query|QueryRow)
	scanargs      []GO.ExprNode     // list of arguments to be passed to the Scan method
	scanroot      GO.ExprNode       // the root node for the fields to be scanned
	scaninits     GO.StmtList       // list of pointer initializations for scanning nested fields
	inputcolumns  SQL.NameGroup     //
	outputcolumns SQL.ValueExprList //
	inputparams   SQL.ValueExprList //
	sqltailnode   SQL.Node          //
	// scantoinput indicates that the output of the query should be scanned
	// into the input of the query, which in an insert or update is already
	// allocated and therefore needs no initialization.
	scantoinput bool
}

func (g *generator) run(pkgname string) error {
	g.imports.Specs = []GO.ImportSpec{{Path: gosqlimport}}

	for _, si := range g.infos {
		g.nparam = 0
		g.asvar = false
		g.fclose = false
		g.insx = nil
		g.queryargs = nil
		g.scanargs = nil
		g.scanroot = nil
		g.scaninits = nil
		g.inputcolumns = nil
		g.outputcolumns = nil
		g.inputparams = nil
		g.sqltailnode = nil
		g.scantoinput = false

		execdecl := g.buildexecdecl(si)
		g.file.Decls = append(g.file.Decls, execdecl)
	}

	g.file.PkgName = pkgname
	g.file.Preamble = GO.LineComment{filepreamble}
	g.file.Imports = []GO.ImportDeclNode{g.imports}

	return GO.Write(g.file, &g.buf)
}

func (g *generator) buildexecdecl(si *specinfo) (m GO.MethodDecl) {
	m.Name = idexec
	m.Recv.Name = idrecv
	m.Recv.Type = GO.PointerRecvType{si.spec.name}
	m.Type.Params = GO.ParamList{{Names: idconn, Type: sxconn}}
	m.Type.Results = GO.ParamList{{Type: iderror}}

	g.scantoinput = ((si.spec.kind == speckindInsert || si.spec.kind == speckindUpdate) &&
		si.spec.rel.rec.isslice && si.spec.result == nil)

	g.prepareInput(si)
	g.prepareOutput(si)

	m.Body.Add(g.buildquerystring(si))
	m.Body.Add(GO.NL{})
	m.Body.Add(g.querydefaults(si))
	m.Body.Add(g.queryexec(si))
	m.Body.Add(g.returnstmt(si))
	return m
}

// prepareInput
func (g *generator) prepareInput(si *specinfo) {
	// prepare input for the INSERT / UPDATE query
	if len(si.info.input) > 0 {
		g.prepareInputGOFields(si)
		g.prepareInputSQLColumns(si)
	}

	// prepare input for the WHERE clause
	if si.spec.where != nil && len(si.spec.where.items) > 0 {
		sx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{si.spec.where.name}}
		g.prepareInputGOWhereblock(si.spec.where.items, sx)
	}

	// prepare input for the LIMIT clause
	if si.spec.limit != nil && len(si.spec.limit.field) > 0 {
		sx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{si.spec.limit.field}}
		g.queryargs = append(g.queryargs, sx)
	}

	// prepare input for the OFFSET clause
	if si.spec.offset != nil && len(si.spec.offset.field) > 0 {
		sx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{si.spec.offset.field}}
		g.queryargs = append(g.queryargs, sx)
	}
}

// prepareInputGOFields prepares a list of GO field selector expressions
// that will be passed as arguments to the query executing function.
func (g *generator) prepareInputGOFields(si *specinfo) {
	rec := si.spec.rel.rec
	name := si.spec.rel.name

	// the root node for the fields to be stored
	root := GO.ExprNode(GO.SelectorExpr{X: idrecv, Sel: GO.Ident{name}})
	if rec.isslice {
		root = GO.Ident{"v"}
	}

	for _, item := range si.info.input {
		if si.skipwrite(item) { // readonly?
			continue
		}
		if si.usedefault(item) { // DEFAULT?
			continue
		}

		// the GO field to be passed as argument
		fx := root
		for _, pe := range item.field.path {
			fx = GO.SelectorExpr{X: fx, Sel: GO.Ident{pe.name}}
		}
		fx = GO.SelectorExpr{X: fx, Sel: GO.Ident{item.field.name}}
		fx = g.transformInputGOFieldExpr(fx, item)
		g.queryargs = append(g.queryargs, fx)
	}
}

// transformInputGOFieldExpr ...
func (g *generator) transformInputGOFieldExpr(x GO.ExprNode, fc *fieldcolumn) GO.ExprNode {
	if fc.field.usejson {
		call := calljson
		call.Args = GO.ArgsList{List: x}
		return call
	}
	return x
}

// prepareInputSQLColumns prepares the target columns for an INSERT or UPDATE
// query, including a list of the SQL parameter placeholders or values.
func (g *generator) prepareInputSQLColumns(si *specinfo) {
	for _, item := range si.info.input {
		if si.skipwrite(item) { // readonly?
			continue
		}

		// the target column
		g.inputcolumns = append(g.inputcolumns, SQL.Name(item.column.name))

		if si.usedefault(item) {
			// the DEFAULT marker
			g.inputparams = append(g.inputparams, SQL.DEFAULT)
		} else {
			// the parameter placeholder
			g.inputparams = append(g.inputparams, g.sqlparam())
		}
	}
}

// prepareInputGOWhereblock prepares the input for a WHERE clause which is a list of
// the GO "where block" fields that will be passed to the query executing function.
func (g *generator) prepareInputGOWhereblock(items []*predicateitem, sx GO.SelectorExpr) {
	for _, item := range items {
		switch node := item.node.(type) {
		case *nestedpredicate:
			g.prepareInputGOWhereblock(node.items, GO.SelectorExpr{X: sx, Sel: GO.Ident{node.name}})
			continue
		case *betweenpredicate:
			if x, ok := node.x.(*paramfield); ok {
				sx := GO.SelectorExpr{X: sx, Sel: GO.Ident{node.name}}
				sx = GO.SelectorExpr{X: sx, Sel: GO.Ident{x.name}}
				g.queryargs = append(g.queryargs, sx)
			}
			if y, ok := node.y.(*paramfield); ok {
				sx := GO.SelectorExpr{X: sx, Sel: GO.Ident{node.name}}
				sx = GO.SelectorExpr{X: sx, Sel: GO.Ident{y.name}}
				g.queryargs = append(g.queryargs, sx)
			}
		case *fieldpredicate:
			if node.pred != isin && node.pred != notin {
				var x GO.ExprNode

				x = GO.SelectorExpr{X: sx, Sel: GO.Ident{node.field.name}}
				if node.qua > 0 {
					gotyp := node.field.typ.string(true)
					coltyp := node.coltype + "[]"
					sel, ok := gotyp2coltyp2converter[gotyp][coltyp]
					if !ok {
						// TODO should not happen here, this should be caught while scanning the db
						log.Fatalf("unsupported type conversion: %s - %s", gotyp, coltyp)
					}
					x = GO.CallExpr{Fun: sel, Args: GO.ArgsList{List: x}}
				}

				g.queryargs = append(g.queryargs, x)
			}
		case *columnpredicate:
			// nothing to do
		}
	}
}

// prepareOutput .................
func (g *generator) prepareOutput(si *specinfo) {
	if len(si.info.output) > 0 {
		skipinit := si.skipinit()
		g.prepareOutputGORoot(si, skipinit)
		g.prepareOutputGORootFields(si, skipinit)
		g.prepareOutputSQLColumns(si)
	}
}

// prepareOutputGORoot resolves the GO root expression of the fields into which
// the output will be scanned, additionally if the root needs to be initialized
// before scanning, an initialization statement will be prepared as well.
func (g *generator) prepareOutputGORoot(si *specinfo, skipinit bool) {
	rec := si.spec.rel.rec
	name := si.spec.rel.name
	if si.spec.result != nil {
		rec = si.spec.result.rec
		name = si.spec.result.name
	}

	g.scanroot = GO.ExprNode(GO.SelectorExpr{X: idrecv, Sel: GO.Ident{name}})
	if rec.isslice && skipinit {
		g.scanroot = GO.IndexExpr{X: g.scanroot, Index: GO.Ident{"i"}}
	} else if rec.isslice || rec.isiter {
		g.scanroot = GO.Ident{"v"}
	}

	if !skipinit {
		// build the initialization statement for the g.scanroot node
		var rootinit GO.StmtNode
		if !rec.isslice && !rec.isiter && rec.ispointer {
			g.scaninits = append(g.scaninits, GO.NL{})

			init := GO.AssignStmt{Token: GO.Assign}
			init.Lhs, init.Rhs = g.scanroot, GO.CallNewExpr{g.rectype(rec)}
			rootinit = init
		} else if (rec.isslice || rec.isiter) && rec.ispointer {
			init := GO.AssignStmt{Token: GO.AssignDefine}
			init.Lhs, init.Rhs = g.scanroot, GO.CallNewExpr{g.rectype(rec)}
			rootinit = init
		} else if (rec.isslice || rec.isiter) && !rec.ispointer {
			init := GO.VarDecl{}
			init.Spec = GO.ValueSpec{Names: GO.Ident{"v"}, Type: g.rectype(rec)}
			rootinit = GO.DeclStmt{init}
		}
		if rootinit != nil {
			g.scaninits = append(g.scaninits, rootinit)
		}
	}
}

// prepareOutputGORootFields ....
func (g *generator) prepareOutputGORootFields(si *specinfo, skipinit bool) {
	// done is used to keep track of pointer fields whose
	// initialization statements have already been created
	var done = make(map[string]bool)

	for _, item := range si.info.output {
		if si.skipread(item) { // writeonly?
			continue
		}

		key := "" // key for the done map

		fx := g.scanroot
		for _, pe := range item.field.path {
			fx = GO.SelectorExpr{X: fx, Sel: GO.Ident{pe.name}}

			if skipinit {
				continue
			}

			key += pe.name
			if pe.ispointer && !done[key] {
				if pe.isimported {
					g.addimport(pe.typepkgpath, pe.typepkgname, pe.typepkglocal)
				}

				// nested pointer field initialization statement
				init := GO.AssignStmt{Token: GO.Assign}
				init.Lhs, init.Rhs = fx, GO.CallNewExpr{g.pathelemtype(pe)}
				g.scaninits = append(g.scaninits, init)

				done[key] = true
			}
		}

		fx = GO.SelectorExpr{X: fx, Sel: GO.Ident{item.field.name}}
		fx = GO.UnaryExpr{Op: GO.UnaryAmp, X: fx}
		fx = g.transformOutputGOFieldExpr(fx, item)
		g.scanargs = append(g.scanargs, fx)
	}
}

// transformOutputGOFieldExpr ...
func (g *generator) transformOutputGOFieldExpr(x GO.ExprNode, fc *fieldcolumn) GO.ExprNode {
	if fc.field.usejson {
		call := calljson
		call.Args = GO.ArgsList{List: x}
		return call
	}
	return x
}

// prepareOutputSQLColumns prepares the list of SQL columns to be returned by the query.
func (g *generator) prepareOutputSQLColumns(si *specinfo) {
	for _, item := range si.info.output {
		if si.skipread(item) { // writeonly?
			continue
		}

		// TODO(mkopriva):
		// - check whether or not the column can be NULL and if so add a COALESCE
		// - check whether or not the field has the "usecoalesce" flag set to true and if so add a COALESCE
		// - ... anything else?
		g.outputcolumns = append(g.outputcolumns, g.sqlcolref(item.colid))
	}
}

func (g *generator) buildquerystring(si *specinfo) (stmt GO.StmtNode) {

	sqlnode := g.sqlnode(si)

	var decl GO.DeclNode
	if g.declarevar(si) {
		decl = GO.VarDecl{Spec: GO.ValueSpec{
			Names:   idquery,
			Values:  GO.RawStringNode{N: sqlnode},
			Comment: GO.LineComment{" `"},
		}}
	} else {
		decl = GO.ConstDecl{Spec: GO.ValueSpec{
			Names:   idquery,
			Values:  GO.RawStringNode{N: sqlnode},
			Comment: GO.LineComment{" `"},
		}}
	}

	if si.spec.kind == speckindInsert && si.spec.rel.rec.isslice {
		result := GO.StmtList{GO.DeclStmt{decl}, GO.NL{}}

		idrel := GO.QualifiedIdent{idrecv.Name, si.spec.rel.name}
		numfields := GO.IntLit(len(g.queryargs))

		if len(g.queryargs) > 0 {
			// params := make([]interface{}, len(q.T)*numoffields)
			asn := GO.AssignStmt{Token: GO.AssignDefine}
			asn.Lhs = idparams
			asn.Rhs = GO.CallMakeExpr{
				Type: idifaces,
				Size: GO.BinaryExpr{
					Op: GO.BinaryMul,
					X:  GO.CallLenExpr{idrel},
					Y:  numfields,
				},
			}
			result = append(result, asn)
		}

		// for i, v := range q.DataSlice {
		loop := GO.ForStmt{}
		{
			if len(g.queryargs) > 0 {
				// for i, v := range q.DataSlice {
				rangeclause := GO.ForRangeClause{}
				rangeclause.Key = GO.Ident{"i"}
				rangeclause.Value = GO.Ident{"v"}
				rangeclause.X = idrel
				rangeclause.Define = true
				loop.Clause = rangeclause

				// pos := i * 4
				asn2 := GO.AssignStmt{Token: GO.AssignDefine}
				asn2.Lhs = GO.Ident{"pos"}
				asn2.Rhs = GO.BinaryExpr{Op: GO.BinaryMul, X: GO.Ident{"i"}, Y: numfields}
				loop.Body = GO.BlockStmt{List: []GO.StmtNode{asn2, GO.NL{}}}

				// params[pos+123] = v.SomeField
				assigns := make([]GO.StmtNode, len(g.queryargs))
				for i, item := range g.queryargs {
					indx := GO.BinaryExpr{Op: GO.BinaryAdd, X: GO.Ident{"pos"}, Y: GO.IntLit(i)}
					asn3 := GO.AssignStmt{Token: GO.Assign}
					asn3.Lhs = GO.IndexExpr{X: idparams, Index: indx}
					asn3.Rhs = item
					assigns[i] = asn3
				}
				loop.Body.List = append(loop.Body.List, assigns...)
				loop.Body.List = append(loop.Body.List, GO.NL{})
			} else {
				// for _, _ := range q.DataSlice {
				rangeclause := GO.ForRangeClause{}
				rangeclause.Key = GO.Ident{"_"}
				rangeclause.Value = GO.Ident{"_"}
				rangeclause.X = idrel
				loop.Clause = rangeclause
			}

			numdefs := 0
			concats := make([]GO.ExprNode, len(g.inputparams)+1)
			for i, item := range g.inputparams {
				sep := `, `
				if i == 0 {
					sep = `(`
				}

				if item == SQL.DEFAULT {
					concats[i] = GO.RawStringLit(sep + `DEFAULT`)
					numdefs += 1
				} else {
					idxexpr := GO.BinaryExpr{Op: GO.BinaryAdd,
						X: GO.Ident{"pos"}, Y: GO.IntLit(i - numdefs),
					}

					// `, ` + gosql.OrdinalParameters[pos+2] +
					concat := GO.BinaryExpr{Op: GO.BinaryAdd}
					concat.X = GO.RawStringLit(sep)
					concat.Y = GO.IndexExpr{X: idordinals, Index: idxexpr}
					concats[i] = concat
				}
			}

			concats[len(concats)-1] = GO.RawStringLit(`),`)

			asn4 := GO.AssignStmt{Token: GO.AssignAdd}
			asn4.Lhs = idquery
			asn4.Rhs = GO.MultiLineExpr{Op: GO.BinaryAdd, Exprs: concats}

			loop.Body.List = append(loop.Body.List, asn4)
		}
		result = append(result, loop)

		asn5 := GO.AssignStmt{Token: GO.Assign}
		asn5.Lhs = idquery
		asn5.Rhs = GO.SliceExpr{X: idquery,
			High: GO.BinaryExpr{Op: GO.BinarySub, X: GO.CallLenExpr{idquery}, Y: GO.IntLit(1)},
		}
		result = append(result, GO.NL{}, asn5)

		if g.sqltailnode != nil {
			asn6 := GO.AssignStmt{Token: GO.AssignAdd}
			asn6.Lhs = idquery
			asn6.Rhs = GO.RawStringNode{Prefix: " ", N: g.sqltailnode, Comment: &GO.LineComment{" `"}}
			result = append(result, asn6)
		}
		return result

	} else if len(g.insx) > 0 {
		// prepare the var declarations
		vardecl := GO.VarDecl{}

		nstatic := GO.ValueSpec{}
		nstatic.Names = GO.Ident{"nstatic"}
		nstatic.Values = GO.IntLit(g.nparam)
		nstatic.Comment = GO.LineComment{" number of static parameters"}

		specs := GO.ValueSpecList{nstatic}
		for i, sx := range g.insx {
			num := strconv.Itoa(i + 1)

			lenspec := GO.ValueSpec{}
			lenspec.Names = GO.Ident{"len" + num}
			lenspec.Values = GO.CallExpr{Fun: idlen, Args: GO.ArgsList{List: sx}}
			lenspec.Comment = GO.LineComment{" length of slice #" + num + " to be unnested"}

			posspec := GO.ValueSpec{}
			posspec.Names = GO.Ident{"pos" + num}
			if i == 0 {
				// the first position is set to the value of nstatic
				posspec.Values = GO.Ident{"nstatic"}
			} else {
				// the rest of the positions are calculated from
				// adding the previous length to the previous position
				prev := strconv.Itoa(i)
				prevlen, prevpos := GO.Ident{"len" + prev}, GO.Ident{"pos" + prev}
				posspec.Values = GO.BinaryExpr{X: prevpos, Op: GO.BinaryAdd, Y: prevlen}
			}
			posspec.Comment = GO.LineComment{" starting position of slice #" + num + " parameters"}

			specs = append(specs, lenspec, posspec)
		}
		vardecl.Spec = specs

		// next is the query declaration
		list := GO.StmtList{GO.DeclStmt{vardecl}, GO.NL{}, GO.DeclStmt{decl}, GO.NL{}}

		// define the params variable
		asn := GO.AssignStmt{Token: GO.AssignDefine}
		asn.Lhs = idparams
		callmake := callmakeparams
		bin := GO.BinaryExpr{X: GO.Ident{"nstatic"}, Op: GO.BinaryAdd, Y: GO.Ident{"len1"}}
		for i := 1; i < len(g.insx); i++ {
			y := GO.Ident{"len" + strconv.Itoa(i+1)}
			bin = GO.BinaryExpr{X: bin, Op: GO.BinaryAdd, Y: y}
		}
		callmake.Args.AddExprs(bin)
		asn.Rhs = callmake
		list = append(list, asn)

		// directly assign non-slice params
		for i, arg := range g.queryargs {
			asn := GO.AssignStmt{Token: GO.Assign}
			asn.Lhs = GO.IndexExpr{X: idparams, Index: GO.IntLit(i)}
			asn.Rhs = arg
			list = append(list, asn)
		}

		for i, sx := range g.insx {
			lenid := GO.Ident{"len" + strconv.Itoa(i+1)}
			posid := GO.Ident{"pos" + strconv.Itoa(i+1)}

			forclause := GO.ForClause{}
			forclause.Init = GO.AssignStmt{Token: GO.AssignDefine, Lhs: ididx, Rhs: GO.IntLit(0)}
			forclause.Cond = GO.BinaryExpr{X: ididx, Op: GO.BinaryLss, Y: lenid}
			forclause.Post = GO.IncDecStmt{X: ididx, Token: GO.IncDecIncrement}
			loop := GO.ForStmt{Clause: forclause}

			asn := GO.AssignStmt{Token: GO.Assign}
			asn.Lhs = GO.IndexExpr{X: idparams, Index: GO.BinaryExpr{X: posid, Op: GO.BinaryAdd, Y: ididx}}
			asn.Rhs = GO.IndexExpr{X: sx, Index: ididx}

			loop.Body = GO.BlockStmt{List: []GO.StmtNode{asn}}

			list = append(list, loop)
		}

		return append(list, GO.NL{})
	} else if len(si.spec.filter) > 0 {
		asn := GO.AssignStmt{Token: GO.AssignAdd}
		asn.Lhs = idquery
		asn.Rhs = GO.CallExpr{Fun: GO.SelectorExpr{
			X:   GO.SelectorExpr{X: idrecv, Sel: GO.Ident{si.spec.filter}},
			Sel: GO.Ident{"ToSQL"},
		}}

		var asn1 GO.StmtNode = GO.NoOp{}
		if g.fclose {
			asn := GO.AssignStmt{Token: GO.AssignAdd}
			asn.Lhs = idquery
			asn.Rhs = GO.RawStringLit(`)`)
			asn1 = asn
		}

		asn2 := GO.AssignStmt{Token: GO.AssignDefine}
		asn2.Lhs = idparams
		asn2.Rhs = GO.CallExpr{Fun: GO.SelectorExpr{
			X:   GO.SelectorExpr{X: idrecv, Sel: GO.Ident{si.spec.filter}},
			Sel: GO.Ident{"Params"},
		}}
		return GO.StmtList{GO.DeclStmt{decl}, GO.NL{}, asn, asn1, asn2, GO.NL{}}
	}
	return GO.DeclStmt{decl}
}

func (g *generator) querydefaults(si *specinfo) (stmt GO.StmtNode) {
	var list GO.StmtList
	if l := si.spec.limit; l != nil && l.value > 0 && len(l.field) > 0 {
		sx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{l.field}}

		asn := GO.AssignStmt{Token: GO.Assign}
		asn.Lhs = sx
		asn.Rhs = GO.IntLit(l.value)

		ifzero := GO.IfStmt{}
		ifzero.Cond = GO.BinaryExpr{X: sx, Op: GO.BinaryEql, Y: GO.IntLit(0)}
		ifzero.Body = GO.BlockStmt{List: []GO.StmtNode{asn}}
		list = append(list, ifzero)
	}

	if o := si.spec.offset; o != nil && o.value > 0 && len(o.field) > 0 {
		sx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{o.field}}

		asn := GO.AssignStmt{Token: GO.Assign}
		asn.Lhs = sx
		asn.Rhs = GO.IntLit(o.value)

		ifzero := GO.IfStmt{}
		ifzero.Cond = GO.BinaryExpr{X: sx, Op: GO.BinaryEql, Y: GO.IntLit(0)}
		ifzero.Body = GO.BlockStmt{List: []GO.StmtNode{asn}}
		list = append(list, ifzero)
	}

	if len(list) == 0 {
		return GO.NoOp{}
	}

	list = append(list, GO.NL{})
	return list
}

func (g *generator) queryexec(si *specinfo) (stmt GO.StmtNode) {
	args := GO.ArgsList{List: idquery}
	if len(g.insx) > 0 || len(si.spec.filter) > 0 || (si.spec.kind == speckindInsert && si.spec.rel.rec.isslice && len(g.queryargs) > 0) {
		args.AddExprs(idparams)
		args.Ellipsis = true
	} else {
		args.AddExprs(g.queryargs...)
		if args.Len() > 3 {
			args.OnePerLine = 2
		}
	}

	// produce c.Exec( ... ) call
	{
		if si.spec.kind != speckindSelect && si.spec.returning == nil && si.spec.result == nil {

			if rafield := si.spec.rowsaffected; rafield != nil {
				// call exec & assign res, err
				asn := GO.AssignStmt{Token: GO.AssignDefine}
				asn.Lhs = GO.ExprList{idres, iderr}
				asn.Rhs = GO.CallExpr{Fun: sxexec, Args: args}

				// check err
				iferr := GO.IfStmt{}
				iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
				iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}

				// call RowsAffected & assing i64, err
				asn2 := GO.AssignStmt{Token: GO.AssignDefine}
				asn2.Lhs = GO.ExprList{idi64, iderr}
				asn2.Rhs = callresrowsaffected

				// check err
				iferr2 := GO.IfStmt{}
				iferr2.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
				iferr2.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}

				//
				asn3 := GO.AssignStmt{Token: GO.Assign}
				asn3.Lhs = GO.SelectorExpr{X: idrecv, Sel: GO.Ident{rafield.name}}
				if rafield.kind == kindint64 {
					asn3.Rhs = idi64
				} else {
					args := GO.ArgsList{List: idi64}
					asn3.Rhs = GO.CallExpr{Fun: GO.Ident{typekind2string[rafield.kind]}, Args: args}
				}

				return GO.StmtList{asn, iferr, asn2, iferr2, GO.NL{}, asn3}
			} else {
				asn := GO.AssignStmt{Token: GO.AssignDefine}
				asn.Lhs = GO.ExprList{idblank, iderr}
				asn.Rhs = GO.CallExpr{Fun: sxexec, Args: args}
				return asn
			}
		}
	}

	// produce c.QueryRow( ... ) call
	{
		rec := si.spec.rel.rec
		if si.spec.result != nil {
			rec = si.spec.result.rec
		}

		if !rec.isslice && !rec.isiter {
			asn := GO.AssignStmt{Token: GO.AssignDefine}
			asn.Lhs = idrow
			asn.Rhs = GO.CallExpr{Fun: sxqueryrow, Args: args}
			//return GO.StmtList{asn, GO.NL{}}
			return GO.StmtList{asn}
		}
	}

	// produce c.Query( ... ) call with if-err-check, defer-rows-close, and
	// for-rows-next loop to scan the rows
	{

		asn := GO.AssignStmt{Token: GO.AssignDefine}
		asn.Lhs = GO.ExprList{idrows, iderr}
		asn.Rhs = GO.CallExpr{Fun: sxquery, Args: args}

		iferr := GO.IfStmt{}
		iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
		iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}

		defclose := GO.DeferStmt{}
		defclose.Call = GO.CallExpr{Fun: sxrowsclose}

		fornext := g.fornext(si, g.scantoinput)
		if g.scantoinput {
			asni := GO.AssignStmt{Token: GO.AssignDefine}
			asni.Lhs = GO.Ident{"i"}
			asni.Rhs = GO.IntLit(0)
			return GO.StmtList{asn, iferr, defclose, GO.NL{}, asni, fornext}
		}
		return GO.StmtList{asn, iferr, defclose, GO.NL{}, fornext}
	}
	return stmt
}

func (g *generator) returnerr(si *specinfo, errx GO.ExprNode) GO.ReturnStmt {
	if si.spec.erh == nil {
		return GO.ReturnStmt{errx}
	}
	if si.spec.erh.isinfo {
		lit := GO.StructLit{Type: sxerrorinfo, Compact: true}
		lit.Elems = []GO.FieldElement{
			{"Error", iderr},
			{"Query", idquery},
			{"SpecKind", GO.StringLit(si.spec.kind.String())},
			{"SpecName", GO.StringLit(si.spec.name)},
			{"SpecValue", idrecv},
		}
		litptr := GO.UnaryExpr{Op: GO.UnaryAmp, X: lit}

		sx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{si.spec.erh.name}}
		fun := GO.SelectorExpr{X: sx, Sel: GO.Ident{"HandleErrorInfo"}}
		call := GO.CallExpr{Fun: fun, Args: GO.ArgsList{List: litptr}}
		return GO.ReturnStmt{call}

		// TODO if errx is not iderr, then errx is probably a CallFunc and
		// should first be executed and it's result passed into HandleErrorInfo..
	}
	sx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{si.spec.erh.name}}
	fun := GO.SelectorExpr{X: sx, Sel: GO.Ident{"HandleError"}}
	call := GO.CallExpr{Fun: fun, Args: GO.ArgsList{List: errx}}
	return GO.ReturnStmt{call}
}

func (g *generator) fornext(si *specinfo, inputscan bool) (stmt GO.ForStmt) {
	stmt.Clause = GO.ForCondition{callrowsnext}
	// scan & assign error
	{
		var args GO.ArgsList
		if len(g.scanargs) > 2 {
			args.OnePerLine = 1
		}
		args.AddExprs(g.scanargs...)
		stmt.Body.List = append(stmt.Body.List, g.scaninits...)

		asn := GO.AssignStmt{Token: GO.AssignDefine}
		asn.Lhs = iderr
		asn.Rhs = GO.CallExpr{Fun: sxrowsscan, Args: args}
		stmt.Body.List = append(stmt.Body.List, asn)
	}

	// check error & newline
	{
		iferr := GO.IfStmt{}
		iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
		iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}
		stmt.Body.List = append(stmt.Body.List, iferr, GO.NL{})
	}

	// append OR iterate
	{
		rec := si.spec.rel.rec
		fieldname := si.spec.rel.name
		if si.spec.result != nil {
			rec = si.spec.result.rec
			fieldname = si.spec.result.name
		}

		if rec.isafterscanner {
			// call afterscan
			sx := GO.SelectorExpr{X: g.scanroot, Sel: idafterscan}
			afterscan := GO.ExprStmt{GO.CallExpr{Fun: sx}}
			stmt.Body.List = append(stmt.Body.List, afterscan)
		}

		if rec.isiter {
			var call GO.CallExpr
			if len(rec.itermethod) > 0 {
				call = GO.CallExpr{Fun: GO.SelectorExpr{
					X:   GO.SelectorExpr{X: idrecv, Sel: GO.Ident{fieldname}},
					Sel: GO.Ident{rec.itermethod}},
					Args: GO.ArgsList{List: GO.Ident{"v"}},
				}
			} else {
				call = GO.CallExpr{Fun: GO.SelectorExpr{
					X:   idrecv,
					Sel: GO.Ident{fieldname}},
					Args: GO.ArgsList{List: GO.Ident{"v"}},
				}
			}

			asn := GO.AssignStmt{Token: GO.AssignDefine}
			asn.Lhs = iderr
			asn.Rhs = call

			iferr := GO.IfStmt{}
			iferr.Init = asn
			iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
			iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}
			stmt.Body.List = append(stmt.Body.List, iferr)
		} else if g.scantoinput {
			asn := GO.AssignStmt{Token: GO.AssignAdd}
			asn.Lhs = GO.Ident{"i"}
			asn.Rhs = GO.IntLit(1)
			stmt.Body.List = append(stmt.Body.List, asn)
		} else {
			appnd := GO.CallExpr{Fun: GO.Ident{"append"}}
			appnd.Args = GO.ArgsList{List: GO.ExprList{
				GO.SelectorExpr{X: idrecv, Sel: GO.Ident{fieldname}},
				GO.Ident{"v"},
			}}

			asn := GO.AssignStmt{Token: GO.Assign}
			asn.Lhs = GO.SelectorExpr{X: idrecv, Sel: GO.Ident{fieldname}}
			asn.Rhs = appnd
			stmt.Body.List = append(stmt.Body.List, asn)
		}
	}
	return stmt
}

func (g *generator) returnstmt(si *specinfo) (stmt GO.StmtNode) {
	if si.spec.rowsaffected != nil {
		return GO.ReturnStmt{idnil}
	}

	if si.spec.kind == speckindSelect || si.spec.returning != nil {
		rel := si.spec.rel

		// does the record type need pre-allocation? and is it imported?
		if rel.rec.base.isimported && (rel.rec.isslice || rel.rec.ispointer) && (si.spec.kind != speckindInsert && si.spec.kind != speckindUpdate) {
			g.addimport(rel.rec.base.pkgpath, rel.rec.base.pkgname, rel.rec.base.pkglocal)
		}

		if rel.rec.isslice || rel.rec.isarray || rel.rec.isiter {
			if si.spec.erh != nil && si.spec.erh.isinfo {
				asn := GO.AssignStmt{Token: GO.AssignDefine}
				asn.Lhs = iderr
				asn.Rhs = callrowserr

				iferr := GO.IfStmt{}
				iferr.Init = asn
				iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
				iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}

				return GO.StmtList{iferr, GO.ReturnStmt{idnil}}
			}
			return g.returnerr(si, callrowserr)
		} else {
			var args GO.ArgsList
			var list GO.StmtList // result

			if si.spec.selkind > selectfrom {
				fx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{rel.name}}
				args.AddExprs(GO.UnaryExpr{Op: GO.UnaryAmp, X: fx})
			} else {
				if len(g.scanargs) > 2 {
					args.OnePerLine = 1
				}
				args.AddExprs(g.scanargs...)
				list = append(list, g.scaninits...)
			}

			if !rel.rec.isafterscanner {
				call := GO.CallExpr{Fun: sxrowscan, Args: args}
				if si.spec.erh != nil && si.spec.erh.isinfo {
					asn := GO.AssignStmt{Token: GO.AssignDefine}
					asn.Lhs = iderr
					asn.Rhs = call

					iferr := GO.IfStmt{}
					iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
					iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}

					list = append(list, asn, iferr, GO.ReturnStmt{idnil})
				} else {
					list = append(list, g.returnerr(si, call))
				}
			} else {
				// scan & assign error
				asn := GO.AssignStmt{Token: GO.AssignDefine}
				asn.Lhs = iderr
				asn.Rhs = GO.CallExpr{Fun: sxrowscan, Args: args}

				// check error
				iferr := GO.IfStmt{}
				iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
				iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}

				// call afterscan
				sx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{rel.name}}
				sx = GO.SelectorExpr{X: sx, Sel: idafterscan}
				afterscan := GO.ExprStmt{GO.CallExpr{Fun: sx}}

				// call afterscan
				ret := GO.ReturnStmt{idnil}

				// done
				list = append(list, asn, iferr, GO.NL{}, afterscan, ret)
			}

			return list
		}
	}

	// result field
	if si.spec.result != nil {
		rel := si.spec.result
		// does the record type need pre-allocation? and is it imported?
		if rel.rec.base.isimported && (rel.rec.isslice || rel.rec.ispointer) {
			g.addimport(rel.rec.base.pkgpath, rel.rec.base.pkgname, rel.rec.base.pkglocal)
		}

		if rel.rec.isslice || rel.rec.isarray || rel.rec.isiter {
			if si.spec.erh != nil && si.spec.erh.isinfo {
				asn := GO.AssignStmt{Token: GO.AssignDefine}
				asn.Lhs = iderr
				asn.Rhs = callrowserr

				iferr := GO.IfStmt{}
				iferr.Init = asn
				iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
				iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}

				return GO.StmtList{iferr, GO.ReturnStmt{idnil}}
			}
			return g.returnerr(si, callrowserr)
		} else {
			var args GO.ArgsList
			if len(g.scanargs) > 2 {
				args.OnePerLine = 1
			}
			args.AddExprs(g.scanargs...)

			var list GO.StmtList // result
			list = append(list, g.scaninits...)

			if !rel.rec.isafterscanner {
				call := GO.CallExpr{Fun: sxrowscan, Args: args}
				if si.spec.erh != nil && si.spec.erh.isinfo {
					asn := GO.AssignStmt{Token: GO.AssignDefine}
					asn.Lhs = iderr
					asn.Rhs = call

					iferr := GO.IfStmt{}
					iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
					iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}

					list = append(list, asn, iferr, GO.ReturnStmt{idnil})
				} else {
					list = append(list, g.returnerr(si, call))
				}
			} else {
				// scan & assing error
				asn := GO.AssignStmt{Token: GO.AssignDefine}
				asn.Lhs = iderr
				asn.Rhs = GO.CallExpr{Fun: sxrowscan, Args: args}

				// check error
				iferr := GO.IfStmt{}
				iferr.Cond = GO.BinaryExpr{X: iderr, Op: GO.BinaryNeq, Y: idnil}
				iferr.Body = GO.BlockStmt{List: []GO.StmtNode{g.returnerr(si, iderr)}}

				// call afterscan
				sx := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{rel.name}}
				sx = GO.SelectorExpr{X: sx, Sel: idafterscan}
				afterscan := GO.ExprStmt{GO.CallExpr{Fun: sx}}

				// call afterscan
				ret := GO.ReturnStmt{idnil}

				// done
				list = append(list, asn, iferr, GO.NL{}, afterscan, ret)
			}

			return list
		}
	}

	return g.returnerr(si, iderr)
}

func (g *generator) rectype(rec recordtype) GO.TypeNode {
	if rec.base.isimported {
		return GO.QualifiedIdent{rec.base.pkgname, rec.base.name}
	}
	return GO.Ident{rec.base.name}
}

func (g *generator) pathelemtype(pe *pathelem) GO.TypeNode {
	if pe.isimported {
		return GO.QualifiedIdent{pe.typepkgname, pe.typename}
	}
	return GO.Ident{pe.typename}
}

func (g *generator) addimport(path, name, local string) {
	// check that the package path hasn't yet been added to the imports
	for _, spec := range g.imports.Specs {
		if string(spec.Path) == path {
			return
		}
	}

	// if the local name is the same as the package name set it to empty
	if local == name {
		local = ""
	}

	spec := GO.ImportSpec{Path: GO.StringLit(path), Name: GO.Ident{local}}
	g.imports.Specs = append(g.imports.Specs, spec)
}

func (g *generator) sqlnode(si *specinfo) (node GO.Node) {
	switch si.spec.kind {
	case speckindInsert:
		return g.sqlinsert(si)
	case speckindUpdate:
		return g.sqlupdate(si)
	case speckindSelect:
		switch si.spec.selkind {
		case selectcount:
			return g.sqlselectcount(si)
		case selectexists, selectnotexists:
			return g.sqlselectexists(si)
		}
		return g.sqlselect(si)
	case speckindDelete:
		return g.sqldelete(si)
	}
	return node
}

// sqlinsert builds and returns an SQL.InsertStatement.
func (g *generator) sqlinsert(si *specinfo) (stmt SQL.InsertStatement) {
	var src SQL.InsertSource
	if si.spec.rel.rec.isslice {
		src.Values = &SQL.ValuesClause{}
	} else {
		src.Values = &SQL.ValuesClause{g.inputparams}
	}

	stmt.Head.Table = g.sqlrelid(si.spec.rel.relid)
	stmt.Head.Columns = g.inputcolumns
	stmt.Head.Overriding = overridingkind2sqlclause[si.spec.override]
	stmt.Head.Source = src
	//stmt.Head.Source.Select = nil

	if si.spec.kind == speckindInsert && si.spec.rel.rec.isslice && len(g.outputcolumns) > 0 {
		var tail SQL.InsertTail
		tail.OnConflict = g.sqlonconflict(si)
		tail.Returning = SQL.ReturningClause(g.outputcolumns)
		g.sqltailnode = tail
	} else {
		stmt.Tail.OnConflict = g.sqlonconflict(si)
		stmt.Tail.Returning = SQL.ReturningClause(g.outputcolumns)
	}
	return stmt
}

func (g *generator) sqlupdate(si *specinfo) (updstmt SQL.UpdateStatement) {
	// TODO
	return updstmt
}

// sqlselect builds and returns an SQL.SelectStatement.
func (g *generator) sqlselect(si *specinfo) (selstmt SQL.SelectStatement) {
	selstmt.Columns = g.outputcolumns // columns
	selstmt.Table = g.sqlrelid(si.spec.rel.relid)
	selstmt.Join = g.sqljoin(si.spec.join)
	selstmt.Where = g.sqlwhere(si.spec.where)
	selstmt.Order = g.sqlorderby(si.spec)
	selstmt.Limit = g.sqllimit(si.spec)
	selstmt.Offset = g.sqloffset(si.spec)
	return selstmt
}

// sqldelete builds and returns an SQL.DeleteStatement.
func (g *generator) sqldelete(si *specinfo) (delstmt SQL.DeleteStatement) {
	delstmt.Table = g.sqlrelid(si.spec.rel.relid)
	delstmt.Using = g.sqlusing(si.spec.join)
	delstmt.Where = g.sqlwhere(si.spec.where)
	delstmt.Returning = SQL.ReturningClause(g.outputcolumns) //returning
	return delstmt
}

// sqlselectexists builds and returns an SQL.SelectExistsStatement.
func (g *generator) sqlselectexists(si *specinfo) (selstmt SQL.SelectExistsStatement) {
	selstmt.Table = g.sqlrelid(si.spec.rel.relid)
	selstmt.Join = g.sqljoin(si.spec.join)
	selstmt.Not = si.spec.selkind == selectnotexists
	if si.spec.filter == "" {
		selstmt.Where = g.sqlwhere(si.spec.where)
		selstmt.Order = g.sqlorderby(si.spec)
		selstmt.Limit = g.sqllimit(si.spec)
		selstmt.Offset = g.sqloffset(si.spec)
	} else {
		selstmt.Open = true
		g.fclose = true
	}
	return selstmt
}

// sqlselectcount builds and returns an SQL.SelectCountStatement.
func (g *generator) sqlselectcount(si *specinfo) (selstmt SQL.SelectCountStatement) {
	selstmt.Table = g.sqlrelid(si.spec.rel.relid)
	selstmt.Join = g.sqljoin(si.spec.join)
	if si.spec.filter == "" {
		selstmt.Where = g.sqlwhere(si.spec.where)
		selstmt.Order = g.sqlorderby(si.spec)
		selstmt.Offset = g.sqloffset(si.spec)
	}
	return selstmt
}

func (g *generator) sqlwhere(w *whereblock) (where SQL.WhereClause) {
	if w != nil {
		sel := GO.SelectorExpr{X: idrecv, Sel: GO.Ident{w.name}}
		where.SearchCondition, _ = g.sqlsearchcond(w.items, sel, false)
	}
	return where
}

func (g *generator) sqlsearchcond(items []*predicateitem, sel GO.SelectorExpr, parenthesized bool) (list SQL.BoolValueExprList, count int) {
	for _, item := range items {
		count += 1

		var x SQL.BoolValueExpr
		switch node := item.node.(type) {
		// nested: recurse
		case *nestedpredicate:
			var ncount int

			sel := GO.SelectorExpr{X: sel, Sel: GO.Ident{node.name}}
			x, ncount = g.sqlsearchcond(node.items, sel, true)

			count += ncount - 1

		// 3-arg predicate: build & return
		case *betweenpredicate:
			p := SQL.BetweenPredicate{}
			p.Predicand = g.sqlcolref(node.colid)
			if x, ok := node.x.(colid); ok {
				p.LowEnd = g.sqlcolref(x)
			} else {
				// assume node.x is *paramfield
				p.LowEnd = g.sqlparam()
			}
			if y, ok := node.y.(colid); ok {
				p.HighEnd = g.sqlcolref(y)
			} else {
				// assume node.x is *paramfield
				p.HighEnd = g.sqlparam()
			}
			x = p

		// 2-arg predicates: prepare first, then build & return
		case *fieldpredicate, *columnpredicate:
			var (
				lhs     SQL.ValueExpr
				rhs     SQL.ValueExpr
				pred    predicate
				qua     quantifier
				field   string
				coltype string
			)

			// prepare
			switch node := node.(type) {
			case *fieldpredicate:
				pred = node.pred
				qua = node.qua
				lhs = g.sqlcolref(node.colid)
				rhs = g.sqlparam()
				if len(node.modfunc) > 0 {
					li := SQL.RoutineInvocation{}
					li.Name = string(node.modfunc)
					li.Args = []SQL.ValueExpr{lhs}
					lhs = li

					ri := SQL.RoutineInvocation{}
					ri.Name = string(node.modfunc)
					ri.Args = []SQL.ValueExpr{rhs}
					rhs = ri
				}

				if qua > 0 {
					coltype = node.coltype
				}

				field = node.field.name // needed for isin/notin predicates
			case *columnpredicate:
				pred = node.pred
				qua = node.qua
				lhs = g.sqlcolref(node.colid)
				if !node.colid2.isempty() {
					rhs = g.sqlcolref(node.colid2)
				} else if len(node.lit) > 0 {
					rhs = SQL.Literal{node.lit}
				}
			}

			// quantifier?
			if qua > 0 {
				if len(coltype) > 0 {
					cast := SQL.CastExpr{}
					cast.Expr = rhs
					cast.Type = coltype + "[]"
					rhs = cast
				}
				qx := SQL.QuantifiedExpr{}
				qx.Qua = quantifier2sqlquantifier[qua]
				qx.Expr = rhs
				rhs = qx
			}

			// build & return
			switch pred {
			case iseq, noteq, noteq2, islt, isgt, islte, isgte:
				p := SQL.ComparisonPredicate{}
				p.Cmp = predicate2sqlcmpop[pred]
				p.LPredicand = lhs
				p.RPredicand = rhs
				x = p
			case islike, notlike:
				p := SQL.LikePredicate{}
				p.Not = (pred == notlike)
				p.Predicand = lhs
				p.Pattern = rhs
				x = p
			case isilike, notilike:
				p := SQL.ILikePredicate{}
				p.Not = (pred == notilike)
				p.Predicand = lhs
				p.Pattern = rhs
				x = p
			case issimilar, notsimilar:
				p := SQL.SimilarPredicate{}
				p.Not = (pred == notsimilar)
				p.Predicand = lhs
				p.Pattern = rhs
				x = p
			case isdistinct, notdistinct:
				p := SQL.DistinctPredicate{}
				p.Not = (pred == notdistinct)
				p.LPredicand = lhs
				p.RPredicand = rhs
				x = p
			case ismatch, ismatchi, notmatch, notmatchi:
				p := SQL.RegexPredicate{}
				p.Op = predicate2sqlregexop[pred]
				p.Predicand = lhs
				p.Pattern = rhs
				x = p
			case isin, notin:
				sx := GO.SelectorExpr{X: sel, Sel: GO.Ident{field}}
				g.insx = append(g.insx, sx)
				g.nparam -= 1  // ordinal param won't be used directly
				g.asvar = true // queryString should be var not const

				num := strconv.Itoa(len(g.insx))
				arg1 := GO.Ident{"len" + num}
				//arg2 := GO.BinaryExpr{X: GO.Ident{"pos" + num}, Op: GO.BinaryAdd, Y: GO.IntLit(1)}
				arg2 := GO.Ident{"pos" + num}

				call := callinvaluelist
				call.Args = GO.ArgsList{List: GO.ExprList{arg1, arg2}}

				p := SQL.InPredicate{}
				p.Not = (pred == notin)
				p.Predicand = lhs
				p.ValueList = SQL.HostValue{GO.RawStringInsertExpr{call}}
				x = p
			case istrue, nottrue, isfalse, notfalse, isunknown, notunknown:
				p := SQL.TruthPredicate{}
				p.Not = (pred == nottrue || pred == notfalse || pred == notunknown)
				p.Truth = predicate2sqltruth[pred]
				p.Predicand = lhs
				x = p
			case isnull, notnull:
				p := SQL.NullPredicate{}
				p.Not = (pred == notnull)
				p.Predicand = lhs
				x = p
			default:
				// no predicate, assume lhs is by itself a boolean value expression
				if p, ok := lhs.(SQL.BoolValueExpr); ok {
					x = p
				}
			}
		}

		switch item.op {
		default: // initial
			list.Initial = x
		case booland:
			list.Items = append(list.Items, SQL.AND{Operand: x})
		case boolor:
			list.Items = append(list.Items, SQL.OR{Operand: x})
		}

	}

	if count > 2 {
		list.ListStyle = true
	}

	list.Parenthesized = parenthesized
	return list, count
}

func (g *generator) sqlonconflict(si *specinfo) (clause *SQL.OnConflictClause) {
	if si.spec.onconflict == nil {
		return nil
	}

	clause = new(SQL.OnConflictClause)

	// conflict target
	if len(si.spec.onconflict.column) > 0 {
		target := make(SQL.ConflictColumns, len(si.spec.onconflict.column))
		for i := 0; i < len(target); i++ {
			target[i] = SQL.Name(si.spec.onconflict.column[i].name)
		}
		clause.Target = target
	} else if len(si.spec.onconflict.index) > 0 {
		target := SQL.ConflictIndex{}
		target.Expr = si.info.conflictindex.indexpr
		target.Pred = si.info.conflictindex.indpred
		clause.Target = target
	} else if len(si.spec.onconflict.constraint) > 0 {
		clause.Target = SQL.ConflictConstraint(si.spec.onconflict.constraint)
	}

	if si.spec.onconflict.ignore {
		return clause
	}

	// TODO
	// spec.onconflict.update.all
	// spec.onconflict.update.items

	return clause
}

func (g *generator) sqlorderby(spec *typespec) (order SQL.OrderClause) {
	if spec.orderby == nil {
		return order
	}

	for _, item := range spec.orderby.items {
		by := SQL.OrderBy{}
		by.Column = g.sqlcolref(item.col)
		by.Desc = (item.dir == orderdesc)
		order.List = append(order.List, by)
	}
	return order
}

func (g *generator) sqlusing(jb *joinblock) (using SQL.UsingClause) {
	if jb == nil {
		return using
	}

	using.List = []SQL.TableExpr{g.sqlrelid(jb.rel)}
	for _, item := range jb.items {
		var join SQL.TableJoin
		join.Type = jointype2sqljointype[item.typ]
		join.Rel = g.sqlrelid(item.rel)
		join.Cond = g.sqljoincond(item.conds)
		using.List = append(using.List, join)
	}
	return using
}

func (g *generator) sqljoin(jb *joinblock) (jc SQL.JoinClause) {
	if jb == nil {
		return jc
	}

	for _, item := range jb.items {
		var join SQL.TableJoin
		join.Type = jointype2sqljointype[item.typ]
		join.Rel = g.sqlrelid(item.rel)
		join.Cond = g.sqljoincond(item.conds)
		jc.List = append(jc.List, join)
	}
	return jc
}

func (g *generator) sqljoincond(items []*predicateitem) (cond SQL.JoinCondition) {
	if len(items) > 0 {
		list, _ := g.sqlsearchcond(items, GO.SelectorExpr{}, false)
		list.ListStyle = false

		cond.SearchCondition = list
	}
	return cond
}

// sqllimit generates and returns an SQL.LimitClause based on the given spec's "limit" field.
func (g *generator) sqllimit(spec *typespec) (limit SQL.LimitClause) {
	if spec.limit != nil {
		if len(spec.limit.field) > 0 {
			limit.Value = g.sqlparam()
		} else if spec.limit.value > 0 {
			limit.Value = SQL.LimitUint(spec.limit.value)
		}
		return limit
	}

	// In case the spec doesn't have a "limit" field, but the relation
	// field handles only a single record (i.e. it's not a slice, etc.)
	// then, by default, generate a `LIMIT 1` clause.
	if r := spec.rel.rec; !r.isarray && !r.isslice && !r.isiter {
		limit.Value = SQL.LimitInt(1)
		return limit
	}
	return limit
}

// sqloffset generates and returns an SQL.OffsetClause based on the given spec's "offset" field.
func (g *generator) sqloffset(spec *typespec) (offset SQL.OffsetClause) {
	if spec.offset != nil {
		if len(spec.offset.field) > 0 {
			offset.Value = g.sqlparam()
		} else if spec.offset.value > 0 {
			offset.Value = SQL.OffsetUint(spec.offset.value)
		}
		return offset
	}
	return offset
}

func (g *generator) sqlrelid(id relid) SQL.Ident {
	return SQL.Ident{
		Name:  SQL.Name(id.name),
		Qual:  id.qual,
		Alias: id.alias,
	}
}

func (g *generator) sqlcolref(id colid) SQL.ColumnReference {
	return SQL.ColumnReference{
		Qual: id.qual,
		Name: SQL.Name(id.name),
	}
}

func (g *generator) sqlparam() SQL.OrdinalParameterSpec {
	g.nparam += 1
	return SQL.OrdinalParameterSpec{g.nparam}
}

// declarevar reports whether the queryString value should be declared as a var or as a const.
func (g *generator) declarevar(si *specinfo) bool {
	return g.asvar || len(si.spec.filter) > 0 ||
		((si.spec.kind == speckindInsert || si.spec.kind == speckindUpdate) &&
			si.spec.rel.rec.isslice)
}

var overridingkind2sqlclause = map[overridingkind]SQL.OverridingClause{
	overridingsystem: "SYSTEM",
	overridinguser:   "USER",
}

var predicate2sqlcmpop = map[predicate]SQL.CMPOP{
	iseq:   SQL.EQUAL,
	noteq:  SQL.NOT_EQUAL,
	noteq2: SQL.NOT_EQUAL2,
	islt:   SQL.LESS_THAN,
	isgt:   SQL.GREATER_THAN,
	islte:  SQL.LESS_THAN_EQUAL,
	isgte:  SQL.GREATER_THAN_EQUAL,
}

var predicate2sqlregexop = map[predicate]SQL.REGEXOP{
	ismatch:   SQL.MATCH,
	ismatchi:  SQL.MATCH_CI,
	notmatch:  SQL.NOT_MATCH,
	notmatchi: SQL.NOT_MATCH_CI,
}

var predicate2sqltruth = map[predicate]SQL.TRUTH{
	isunknown:  SQL.UNKNOWN,
	notunknown: SQL.UNKNOWN,
	istrue:     SQL.TRUE,
	nottrue:    SQL.TRUE,
	isfalse:    SQL.FALSE,
	notfalse:   SQL.FALSE,
}

var quantifier2sqlquantifier = map[quantifier]SQL.QUANTIFIER{
	quantany:  SQL.ANY,
	quantsome: SQL.SOME,
	quantall:  SQL.ALL,
}

var jointype2sqljointype = map[jointype]SQL.JoinType{
	joinleft:  SQL.JoinLeft,
	joinright: SQL.JoinRight,
	joinfull:  SQL.JoinFull,
	joincross: SQL.JoinCross,
}

var gotyp2coltyp2converter = map[string]map[string]GO.SelectorExpr{
	gotypbools:   {"boolean[]": GO.SelectorExpr{ /*TODO*/ }},
	gotypstrings: {"text[]": GO.SelectorExpr{X: GO.Ident{"gosql"}, Sel: GO.Ident{"StringSliceToTextArray"}}},
	gotypints: {
		"integer[]":  GO.SelectorExpr{X: GO.Ident{"gosql"}, Sel: GO.Ident{"IntSliceToIntArray"}},
		"smallint[]": GO.SelectorExpr{X: GO.Ident{"gosql"}, Sel: GO.Ident{"IntSliceToIntArray"}},
		"bigint[]":   GO.SelectorExpr{X: GO.Ident{"gosql"}, Sel: GO.Ident{"IntSliceToIntArray"}},
	},
	gotypint8s: {
		"integer[]":  GO.SelectorExpr{ /*TODO*/ },
		"smallint[]": GO.SelectorExpr{ /*TODO*/ },
		"bigint[]":   GO.SelectorExpr{ /*TODO*/ },
	},
	gotypint16s: {
		"integer[]":  GO.SelectorExpr{ /*TODO*/ },
		"smallint[]": GO.SelectorExpr{ /*TODO*/ },
		"bigint[]":   GO.SelectorExpr{ /*TODO*/ },
	},
	gotypint32s: {
		"integer[]":  GO.SelectorExpr{ /*TODO*/ },
		"smallint[]": GO.SelectorExpr{ /*TODO*/ },
		"bigint[]":   GO.SelectorExpr{ /*TODO*/ },
	},
	gotypint64s: {
		"integer[]":  GO.SelectorExpr{ /*TODO*/ },
		"smallint[]": GO.SelectorExpr{ /*TODO*/ },
		"bigint[]":   GO.SelectorExpr{ /*TODO*/ },
	},
}
