// DO NOT EDIT. This file was generated by "github.com/frk/gosql".

package testdata

import (
	"time"

	"github.com/frk/gosql/internal/testdata/common"
)

var _FilterBasic2Records_colmap = map[string]string{
	"id":        `"id"`,
	"email":     `"email"`,
	"fullName":  `"full_name"`,
	"isActive":  `"is_active"`,
	"createdAt": `"created_at"`,
	"updatedAt": `"updated_at"`,
}

func (f *FilterBasic2Records) Init() {
	f.Filter.Init(_FilterBasic2Records_colmap, "")
}

func (f *FilterBasic2Records) Id(op string, val int) *FilterBasic2Records {
	f.Filter.Col(`"id"`, op, val)
	return f
}

func (f *FilterBasic2Records) Email(op string, val string) *FilterBasic2Records {
	f.Filter.Col(`"email"`, op, val)
	return f
}

func (f *FilterBasic2Records) FullName(op string, val string) *FilterBasic2Records {
	f.Filter.Col(`"full_name"`, op, val)
	return f
}

func (f *FilterBasic2Records) IsActive(op string, val bool) *FilterBasic2Records {
	f.Filter.Col(`"is_active"`, op, val)
	return f
}

func (f *FilterBasic2Records) Metadata1(op string, val common.ArbitraryStruct) *FilterBasic2Records {
	f.Filter.Col(`"metadata1"`, op, val)
	return f
}

func (f *FilterBasic2Records) Metadata2(op string, val common.ArbitraryStruct) *FilterBasic2Records {
	f.Filter.Col(`"metadata2"`, op, val)
	return f
}

func (f *FilterBasic2Records) CreatedAt(op string, val time.Time) *FilterBasic2Records {
	f.Filter.Col(`"created_at"`, op, val)
	return f
}

func (f *FilterBasic2Records) UpdatedAt(op string, val time.Time) *FilterBasic2Records {
	f.Filter.Col(`"updated_at"`, op, val)
	return f
}

func (f *FilterBasic2Records) And(nest func(*FilterBasic2Records)) *FilterBasic2Records {
	if nest == nil {
		f.Filter.And(nil)
		return f
	}
	f.Filter.And(func() {
		nest(f)
	})
	return f
}

func (f *FilterBasic2Records) Or(nest func(*FilterBasic2Records)) *FilterBasic2Records {
	if nest == nil {
		f.Filter.Or(nil)
		return f
	}
	f.Filter.Or(func() {
		nest(f)
	})
	return f
}
